def generate_binomial_coefficients(n):
    if n <= 0:
        return []

    # Initialize a 2D array to store the binomial coefficients
    dp = [[0] * (n + 1) for _ in range(n + 1)]

    # Calculate binomial coefficients using dynamic programming
    for i in range(n + 1):
        dp[i][0] = 1
        for j in range(1, i + 1):
            dp[i][j] = dp[i - 1][j - 1] + dp[i - 1][j]

    return dp

def print_binomial_coefficients(coefficients):
    n = len(coefficients) - 1
    max_width = len(str(coefficients[n][n]))
    
    for i in range(n + 1):
        for j in range(i + 1):
            print(str(coefficients[i][j]).rjust(max_width), end=" ")
        print()

# Number of rows to generate in Pascal's Triangle
n = 5

binomial_coefficients = generate_binomial_coefficients(n)

print("Binomial Coefficients (Pascal's Triangle):")
print_binomial_coefficients(binomial_coefficients)

Output-
Binomial Coefficients (Pascal's Triangle):
 1 
 1  1 
 1  2  1 
 1  3  3  1 
 1  4  6  4  1 
 1  5 10 10  5  1 
